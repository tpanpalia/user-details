{"version":3,"sources":["components/UserDetails.jsx","components/Users.jsx","App.js","serviceWorker.js","index.js"],"names":["UserDetails","props","useState","userData","userInfo","setUserInfo","getDisabled","item","className","undefined","Object","keys","map","key","TextField","onChange","e","newValue","handleTextFieldChange","placeholder","required","disabled","PrimaryButton","onClick","console","log","alert","text","Users","usersList","setUsersList","userSelected","setUserSelected","userName","setUserName","isSmalScreen","setIsSmallScreen","isLoading","setIsLoading","useEffect","fetch","then","response","json","data","sort","a","b","name","users","x","push","onWindowResize","window","innerWidth","getHighlightColor","userDetails","addEventListener","removeEventListener","Spinner","style","marginTop","size","SpinnerSize","large","Dropdown","options","evt","option","forEach","backgroundColor","width","App","Boolean","location","hostname","match","initializeIcons","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c94f358.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n    TextField,\r\n    PrimaryButton\r\n} from \"office-ui-fabric-react\";\r\n\r\nconst UserDetails = (props) => {\r\n    const [userInfo, setUserInfo] = useState(props.userData);\r\n\r\n    function handleTextFieldChange(item, newValue){\r\n        let userData = { ...props.userData };\r\n        userData[item] = newValue;\r\n        setUserInfo(userData);\r\n    }\r\n\r\n    const onSubmitClick = () => {\r\n        console.log(userInfo)\r\n        alert(\"Form Data Submitted\")\r\n    };\r\n\r\n    const getDisabled = (item) => {\r\n        if(item === \"name\" || item === \"emailId\") return true;\r\n        else return false;\r\n    };\r\n\r\n    return (\r\n        <form className=\"flex-container-item-2\">\r\n            {props.userData !== undefined &&\r\n            Object.keys(props.userData).map((item) => {\r\n                return (\r\n                    <div key={item}>\r\n                        <TextField\r\n                            onChange={(e, newValue) => \r\n                                handleTextFieldChange(item, newValue)\r\n                            }\r\n                            placeholder={props.userData[item]}\r\n                            required\r\n                            disabled={getDisabled(item)}\r\n                        />\r\n                    </div>\r\n                );\r\n            })\r\n            }\r\n            <div>\r\n                <PrimaryButton onClick={onSubmitClick} text=\"Submit\" />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UserDetails;","import React, { useState, useEffect } from \"react\";\r\nimport \"../assets/Users.css\";\r\nimport UserDetails from \"./UserDetails\";\r\nimport { Dropdown, SpinnerSize, Spinner } from \"office-ui-fabric-react\";\r\n\r\nconst Users = () => {\r\n  const [usersList, setUsersList] = useState([]);\r\n  const [userSelected, setUserSelected] = useState({});\r\n  const [userName, setUserName] = useState([]);\r\n  const [isSmalScreen, setIsSmallScreen] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    fetch(\"http://www.mocky.io/v2/5e55294d31000029b7eb36fb\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        data.sort((a, b) => (a.name > b.name ? 1 : -1));\r\n        setUsersList(data);\r\n        setIsLoading(false);\r\n        setUserSelected(data[0]);\r\n        let users = [];\r\n        data.map((x) => {\r\n          users.push({\r\n            key: x.name,\r\n            text: x.name,\r\n          });\r\n          return null;\r\n        });\r\n        setUserName(users);\r\n      });\r\n  }, []);\r\n\r\n  const onWindowResize = () => {\r\n    setIsSmallScreen(window.innerWidth < 480);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", onWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", onWindowResize);\r\n    };\r\n  }, []);\r\n\r\n  function onUserClick(userDetails) {\r\n    usersList.forEach((x) => {\r\n      if (x.name === userDetails.name) {\r\n        setUserSelected(x);\r\n      }\r\n    });\r\n  }\r\n\r\n  function getHighlightColor(userDetails) {\r\n    if (userSelected === userDetails) {\r\n      return \"#c9daf8\";\r\n    }\r\n  }\r\n\r\n  const handleUserChange = (evt, option) => {\r\n    usersList.forEach((x) => {\r\n      if (x.name === option.text) {\r\n        setUserSelected(x);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading ? (\r\n        <Spinner style={{ marginTop: \"20%\" }} size={SpinnerSize.large} />\r\n      ) : isSmalScreen ? (\r\n        <div className=\"flex-container-small\">\r\n          <Dropdown\r\n            placeholder={userSelected.name}\r\n            options={userName}\r\n            onChange={handleUserChange}\r\n          />\r\n          <div>\r\n            <UserDetails userData={userSelected} />\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"flex-container\">\r\n          <div className=\"flex-container-item-1\">\r\n            {usersList.map((x) => {\r\n              return (\r\n                <div\r\n                  key={x.name}\r\n                  style={{ backgroundColor: getHighlightColor(x) }}\r\n                  onClick={() => onUserClick(x)}\r\n                >\r\n                  {x.name}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          <div style={{ width: \"25%\" }}>\r\n            <UserDetails userData={userSelected} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Users;","import React from 'react';\nimport Users from './components/Users';\n\nfunction App() {\n  return (\n    <div>\n        <Users />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from \"@uifabric/icons\";\ninitializeIcons();\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}